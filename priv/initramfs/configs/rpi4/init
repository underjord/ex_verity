#!/bin/sh
# Init script for the initramfs, first step where we control
# things in the RPi boot sequence.

# Mount the various necessary filesystems
mount -t devtmpfs -o rw none /dev
mount -t proc proc /proc
mount -t sysfs sysfs /sys

echo "Waiting for /dev/mmcblk0p2..." > /dev/kmsg
until  [ -b "/dev/mmcblk0p2" ]; do
  sleep 5
done

echo "Mounting the /boot partition..." > /dev/kmsg
mkdir /boot
# Mount the boot partition
mount -t vfat /dev/mmcblk0p1 /boot
echo "Extracting dm-verity root hash and partition offset..." > /dev/kmsg
# Extract needed files from boot.img so we can use them
mcopy -i /boot/boot.img ::root_hash.txt ::verity_offset.txt /

DATA_SIZE=4096
FS_PATH="/dev/mmcblk0p2"
HASH_OFFSET=$(cat verity_offset.txt)
ROOT_HASH=$(cat root_hash.txt)
MAPPER_NAME="verity"

echo "Setting up verity rootfs mapper..." > /dev/kmsg
echo "Mapper: /dev/mapper/$MAPPER_NAME" > /dev/kmsg
echo "Device: $FS_PATH" > /dev/kmsg
veritysetup open $FS_PATH $MAPPER_NAME $FS_PATH $ROOT_HASH --hash-offset=$HASH_OFFSET
echo "Mounting mapper as /media/root..." > /dev/kmsg
mkdir /media/root
mount "/dev/mapper/$MAPPER_NAME" /media/root
echo "Extracting secure key for data partition..." > /dev/kmsg
echo "hardcodehardcodehardcodehardcode" > keyfile.txt
echo "Setting up device mapper for encrypted data partition..." > /dev/kmsg
cryptsetup open --type=plain --cipher=aes-cbc-plain --key-size=256 --key-file=keyfile.txt -q /dev/mmcblk0p3 data
mkdir /d
echo "Ensuring F2FS filesystem for data partition..." > /dev/kmsg
mkfs.f2fs /dev/mapper/data
echo "Switching from initramfs to rootfs on $FS_PATH, running /sbin/init_sh..." > /dev/kmsg
exec switch_root /media/root /sbin/init_sh
